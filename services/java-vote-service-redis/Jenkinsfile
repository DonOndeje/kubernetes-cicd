node {
    def app

    stage('Clone repository') {
        checkout scm
    }


    stage('Package jar file with Maven') {
         dir('services/java-vote-service-redis') {
            withMaven(
                // Maven installation declared in the Jenkins "Global Tool Configuration"
                maven: 'M3') {
                // Run the maven build
                sh "mvn clean install"
            } 
         }
    }

    stage('Build image with Docker') {
        dir('services/java-vote-service-redis') {
            app = docker.build("services/java-vote-service-redis:${env.BUILD_NUMBER}")
        }
    }

   stage('Push image to container registry') {
        docker.withRegistry('https://sabbour.azurecr.io', 'acr-credentials') {
            app.push("${env.BUILD_NUMBER}")
            app.push("latest")
        }
    }

    stage("Deploy to UAT?") {
        dir('services/java-vote-service-redis/kubernetes') {
            def namespace = input(
                id: 'namespace', message: 'Deploy to UAT?', parameters: [
                [$class: 'TextParameterDefinition', defaultValue: 'uat', description: 'Environment', name: 'env']
            ])

            def imagetag="${env.BUILD_NUMBER}"

            // String replace namespaces
            sh "sed -i.bak s/XX_NAMESPACE_XX/$namespace/g deployment.yaml"
            sh "sed -i.bak s/XX_NAMESPACE_XX/$namespace/g namespace.yaml"
            sh "sed -i.bak s/XX_NAMESPACE_XX/$namespace/g service.yaml"            
         
            // Create namespace
            //sh "kubectl apply --kubeconfig /var/lib/jenkins/config -f namespace.yaml"
            kubectl(namespace, "apply -f namespace.yaml")
       
            // String replace the image name in the deployment and create the deployment
            sh "sed -i.bak s/XX_IMAGETAG_XX/$imagetag/g deployment.yaml"
            //sh "kubectl apply --kubeconfig /var/lib/jenkins/config -f deployment.yaml" 
            kubectl(namespace, "apply -f deployment.yaml")
              
            // Create service
            //sh "kubectl apply --kubeconfig /var/lib/jenkins/config -f service.yaml"
            kubectl(namespace, "apply -f service.yaml")
        }
    }

    stage("Verify UAT") {
        dir('services/java-vote-service-redis/kubernetes') {
            def namespace = "uat"
            def service = "java-vote-service"
            def serviceIP = "";       

            echo "Waiting for Service to get an IP"
            while(serviceIP == "") {
                //serviceIP = sh "kubectl --kubeconfig /var/lib/jenkins/config get service $service --output jsonpath='{.status.loadBalancer.ingress[0].ip}'"
                serviceIP = kubectl(namespace, "get service $service --output jsonpath=\"{.status.loadBalancer.ingress[0].ip}\"").trim()
                if(serviceIP == "") {
                    sleep 10 // give the service some time to get an IP
                }
            }

            sleep 30 // give the pods some time to start
            
            runIntegrationTests(frontendIp)
        }
    }

    stage("Deploy to Production?") {
        dir('services/java-vote-service-redis/kubernetes') {
            def namespace = input(
                id: 'namespace', message: 'Deploy to Production?', parameters: [
                [$class: 'TextParameterDefinition', defaultValue: 'prod', description: 'Environment', name: 'env']
            ])

           def imagetag="${env.BUILD_NUMBER}"

            // String replace namespaces
            sh "sed -i.bak s/XX_NAMESPACE_XX/$namespace/g deployment.yaml"
            sh "sed -i.bak s/XX_NAMESPACE_XX/$namespace/g namespace.yaml"
            sh "sed -i.bak s/XX_NAMESPACE_XX/$namespace/g service.yaml"            
         
            // Create namespace
            //sh "kubectl apply --kubeconfig /var/lib/jenkins/config -f namespace.yaml"
            kubectl(namespace, "apply -f namespace.yaml")
       
            // String replace the image name in the deployment and create the deployment
            sh "sed -i.bak s/XX_IMAGETAG_XX/$imagetag/g deployment.yaml"
            //sh "kubectl apply --kubeconfig /var/lib/jenkins/config -f deployment.yaml" 
            kubectl(namespace, "apply -f deployment.yaml")
              
            // Create service
            //sh "kubectl apply --kubeconfig /var/lib/jenkins/config -f service.yaml"
            kubectl(namespace, "apply -f service.yaml")      
        }
    }
}

def kubectl(namespace,cmd) {
    echo namespace
    echo cmd
    return sh(script: "kubectl --kubeconfig /var/lib/jenkins/config --namespace=${namespace} ${cmd}", returnStdout: true)
}

def runIntegrationTests(frontendIp) {
    echo "Running integration tests to service $frontendIp"
    def resp = sh(script: "curl -sL -w '%{http_code}' -o /dev/null  ${frontendIp} 2>&1", returnStdout: true).trim()
    if (resp != "200") {
        error "Could not reach new service at $frontendIp"
    }
    else {
        echo "Service OK."
    }
}